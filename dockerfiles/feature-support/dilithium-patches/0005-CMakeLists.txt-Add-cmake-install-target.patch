From 1c2464cbb7a012214f474c0858f91401c956e997 Mon Sep 17 00:00:00 2001
From: Tobias Kaufmann <Tobias.KA.Kaufmann@bmw.de>
Date: Tue, 13 Dec 2022 14:34:54 +0100
Subject: [PATCH 5/8] CMakeLists.txt: Add cmake install target

Previously it was not possible to use cmake to generate rules for
installing the library/ies and the header file.

This change adds instructions to install the libraries and the header
file and to create cmake files so that dilithium can be easily be used
in other projects.

For using libdilithium in a cmake-based project you can use the following lines:

-  `find_package(dilithium 3.1 REQUIRED)`
- ` target_link_libraries(${TARGET} PRIVATE dilithium2_ref dilithium3_ref
  dilithium5_ref aes256ctr_ref fips202_ref)`
- Additionally the header file needs to be included in the source file `extern
  "C" { #include <dilithium-3.1/api.h> }`
---
 CMakeLists.txt     |   2 +-
 Config.cmake.in    |   5 +++
 ref/CMakeLists.txt | 103 ++++++++++++++++++++++++++++++++++++++++-----
 3 files changed, 99 insertions(+), 11 deletions(-)
 create mode 100644 Config.cmake.in

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 925f30a..345ad68 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,6 @@
 cmake_minimum_required(VERSION 3.10)
 
-project(dilithium C ASM)
+project(dilithium LANGUAGES C ASM VERSION 3.1.0)
 
 set(CMAKE_C_STANDARD 99)
 set(CMAKE_C_STANDARD_REQUIRED ON)
diff --git a/Config.cmake.in b/Config.cmake.in
new file mode 100644
index 0000000..9a3da7a
--- /dev/null
+++ b/Config.cmake.in
@@ -0,0 +1,5 @@
+@PACKAGE_INIT@
+
+include("${CMAKE_CURRENT_LIST_DIR}/dilithiumTargets.cmake")
+
+check_required_components(dilithium)
\ No newline at end of file
diff --git a/ref/CMakeLists.txt b/ref/CMakeLists.txt
index 9c30fa4..00d960f 100644
--- a/ref/CMakeLists.txt
+++ b/ref/CMakeLists.txt
@@ -1,12 +1,23 @@
-set(DILITHIUM_SRCS sign.c packing.c polyvec.c poly.c ntt.c reduce.c rounding.c)
+set(DILITHIUM_SRCS
+    sign.c
+    packing.c
+    polyvec.c
+    poly.c
+    ntt.c
+    reduce.c
+    rounding.c
+    randombytes.c)
 set(DILITHIUM_FIPS202_SRCS ${DILITHIUM_SRCS} symmetric-shake.c)
 set(DILITHIUM_AES_SRCS ${DILITHIUM_SRCS} symmetric-aes.c)
 set(FIPS202_SRCS fips202.c)
 set(AES256CTR_SRCS aes256ctr.c)
-set(TEST_DILITHIUM_SRCS test/test_dilithium.c randombytes.c)
+set(TEST_DILITHIUM_SRCS test/test_dilithium.c)
 set(TEST_VECTORS_SRCS test/test_vectors.c)
 set(TEST_SPEED_SRCS test/test_speed.c test/speed_print.c test/cpucycles.c randombytes.c)
 
+set(DILITHIUM_SOVERSION "3.1")
+set(DILITHIUM_INSTALL_INCLUDEDIR include/dilithium-${DILITHIUM_SOVERSION})
+
 if(MSVC)
   add_compile_options(/nologo /O2 /W4 /wd4146 /wd4244)
 else()
@@ -15,12 +26,12 @@ else()
   add_compile_options(-O3 -fomit-frame-pointer)
 endif()
 
-add_library(fips202_ref ${FIPS202_SRCS})
-add_library(aes256ctr_ref ${AES256CTR_SRCS})
+add_library(fips202_ref STATIC ${FIPS202_SRCS})
+add_library(aes256ctr_ref STATIC ${AES256CTR_SRCS})
 
 # Dilithium 2
-add_library(dilithium2_ref ${DILITHIUM_FIPS202_SRCS})
-add_library(dilithium2aes_ref ${DILITHIUM_AES_SRCS})
+add_library(dilithium2_ref STATIC ${DILITHIUM_FIPS202_SRCS})
+add_library(dilithium2aes_ref STATIC ${DILITHIUM_AES_SRCS})
 target_compile_definitions(dilithium2_ref PUBLIC DILITHIUM_MODE=2)
 target_compile_definitions(dilithium2aes_ref PUBLIC DILITHIUM_MODE=2 DILITHIUM_USE_AES)
 target_link_libraries(dilithium2_ref INTERFACE fips202_ref)
@@ -42,8 +53,8 @@ if(BUILD_TESTING)
 endif()
 
 # Dilithium 3
-add_library(dilithium3_ref ${DILITHIUM_FIPS202_SRCS})
-add_library(dilithium3aes_ref ${DILITHIUM_AES_SRCS})
+add_library(dilithium3_ref STATIC ${DILITHIUM_FIPS202_SRCS})
+add_library(dilithium3aes_ref STATIC ${DILITHIUM_AES_SRCS})
 target_compile_definitions(dilithium3_ref PUBLIC DILITHIUM_MODE=3)
 target_compile_definitions(dilithium3aes_ref PUBLIC DILITHIUM_MODE=3 DILITHIUM_USE_AES)
 target_link_libraries(dilithium3_ref INTERFACE fips202_ref)
@@ -63,8 +74,8 @@ if(BUILD_TESTING)
 endif()
 
 # Dilithium 5
-add_library(dilithium5_ref ${DILITHIUM_FIPS202_SRCS})
-add_library(dilithium5aes_ref ${DILITHIUM_AES_SRCS})
+add_library(dilithium5_ref STATIC ${DILITHIUM_FIPS202_SRCS})
+add_library(dilithium5aes_ref STATIC ${DILITHIUM_AES_SRCS})
 target_compile_definitions(dilithium5_ref PUBLIC DILITHIUM_MODE=5)
 target_compile_definitions(dilithium5aes_ref PUBLIC DILITHIUM_MODE=5 DILITHIUM_USE_AES)
 target_link_libraries(dilithium5_ref INTERFACE fips202_ref)
@@ -85,6 +96,25 @@ if(BUILD_TESTING)
   add_test(NAME dilithium5aes_ref COMMAND test_dilithium5aes_ref)
 endif()
 
+set_target_properties(
+  dilithium2_ref dilithium2aes_ref dilithium3_ref dilithium3aes_ref
+  dilithium5_ref dilithium5aes_ref PROPERTIES PUBLIC_HEADER api.h)
+
+# Install all static libraries
+install(
+  TARGETS aes256ctr_ref
+          fips202_ref
+          dilithium2_ref
+          dilithium2aes_ref
+          dilithium3_ref
+          dilithium3aes_ref
+          dilithium5_ref
+          dilithium5aes_ref
+  EXPORT dilithiumTargets
+  ARCHIVE DESTINATION lib/dilithium-${DILITHIUM_SOVERSION}
+  INCLUDES
+  DESTINATION include/dilithium-${DILITHIUM_SOVERSION}
+  PUBLIC_HEADER DESTINATION include/dilithium-${DILITHIUM_SOVERSION})
 
 # Vector Tests
 if(BUILD_TESTING)
@@ -135,3 +165,56 @@ if(BUILD_TESTING)
   set_tests_properties(hashes PROPERTIES FIXTURES_REQUIRED createVectorFiles)
 endif()
 
+if(SHARED)
+  # set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--export-all-symbols")
+
+  add_library(libpqcrystals_fips202_ref SHARED $<TARGET_OBJECTS:fips202_ref>)
+  add_library(libpqcrystals_aes256ctr_ref SHARED
+              $<TARGET_OBJECTS:aes256ctr_ref>)
+
+  add_library(libpqcrystals_dilithium2_ref SHARED
+              $<TARGET_OBJECTS:dilithium2_ref>)
+  add_library(libpqcrystals_dilithium2aes_ref SHARED
+              $<TARGET_OBJECTS:dilithium2aes_ref>)
+  add_library(libpqcrystals_dilithium3_ref SHARED
+              $<TARGET_OBJECTS:dilithium3_ref>)
+  add_library(libpqcrystals_dilithium3aes_ref SHARED
+              $<TARGET_OBJECTS:dilithium3aes_ref>)
+  add_library(libpqcrystals_dilithium5_ref SHARED
+              $<TARGET_OBJECTS:dilithium5_ref>)
+  add_library(libpqcrystals_dilithium5aes_ref SHARED
+              $<TARGET_OBJECTS:dilithium5aes_ref>)
+  install(
+  TARGETS libpqcrystals_fips202_ref
+     libpqcrystals_aes256ctr_ref
+     libpqcrystals_dilithium2_ref
+     libpqcrystals_dilithium2aes_ref
+     libpqcrystals_dilithium3_ref
+     libpqcrystals_dilithium3aes_ref
+     libpqcrystals_dilithium5_ref
+     libpqcrystals_dilithium5aes_ref
+  EXPORT dilithiumTargets
+  LIBRARY DESTINATION lib/dilithium-${DILITHIUM_SOVERSION}
+  INCLUDES
+  DESTINATION include/dilithium-${DILITHIUM_SOVERSION}
+  PUBLIC_HEADER DESTINATION include/dilithium-${DILITHIUM_SOVERSION})
+endif()
+
+include(CMakePackageConfigHelpers)
+configure_package_config_file(
+  ${CMAKE_SOURCE_DIR}/Config.cmake.in "dilithiumConfig.cmake"
+  INSTALL_DESTINATION lib/cmake/dilithium-${DILITHIUM_SOVERSION})
+
+write_basic_package_version_file(
+  "dilithiumConfigVersion.cmake"
+  VERSION ${DILITHIUM_SOVERSION}
+  COMPATIBILITY SameMajorVersion)
+
+install(
+  EXPORT dilithiumTargets
+  FILE dilithiumTargets.cmake
+  DESTINATION lib/cmake/dilithium-${DILITHIUM_SOVERSION})
+
+install(FILES "${CMAKE_CURRENT_BINARY_DIR}/dilithiumConfig.cmake"
+              "${CMAKE_CURRENT_BINARY_DIR}/dilithiumConfigVersion.cmake"
+        DESTINATION lib/cmake/dilithium-${DILITHIUM_SOVERSION})
-- 
2.38.1

