From 5825351eeb3687ada59172fc41cd6b5287ef77d2 Mon Sep 17 00:00:00 2001
From: Tobias Kaufmann <Tobias.KA.Kaufmann@bmw.de>
Date: Tue, 13 Dec 2022 14:40:09 +0100
Subject: [PATCH 4/8] CMakeLists.txt: Add UBSAN and ASAN build-types

The Address SANitzier and the Undefined Behaviour SANitizer are standard
tools of modern compilers to ensure quality of software components.

To make sure that dilithium does not contain bugs new build types to
execute the tests with ASAN and UBSAN are added.

ASAN and UBSAN can be enabled setting CMAKE_BUILD_TYPE.
E.g. cmake -DCMAKE_BUILD_TYPE=ASAN ...
---
 CMakeLists.txt                |  13 ++++
 LICENSE                       |   9 ++-
 cmake/ASanitizerTarget.cmake  | 130 ++++++++++++++++++++++++++++++++++
 cmake/UBSanitizerTarget.cmake | 125 ++++++++++++++++++++++++++++++++
 4 files changed, 274 insertions(+), 3 deletions(-)
 create mode 100644 cmake/ASanitizerTarget.cmake
 create mode 100644 cmake/UBSanitizerTarget.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f56a1bf..925f30a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,10 +10,23 @@ set(CMAKE_C_STANDARD_REQUIRED ON)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
+# CMake modules provided by the project
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/)
+
 if(BUILD_TESTING)
     message(STATUS "Testing enabled.")
     enable_testing()
 endif()
 
+if(CMAKE_BUILD_TYPE STREQUAL ASAN)
+    message(STATUS "Address sanitizing enabled.")
+    include(ASanitizerTarget)
+endif()
+
+if(CMAKE_BUILD_TYPE STREQUAL UBSAN)
+    message(STATUS "Undefined behaviour sanitizing enabled.")
+    include(UBSanitizerTarget)
+endif()
+
 add_subdirectory(ref)
 #add_subdirectory(avx2)
diff --git a/LICENSE b/LICENSE
index cddfe61..b40bd28 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,7 +1,10 @@
 Public Domain (https://creativecommons.org/share-your-work/public-domain/cc0/);
 or Apache 2.0 License (https://www.apache.org/licenses/LICENSE-2.0.html).
 
-For Keccak and the random number generator 
-we are using public-domain code from sources 
-and by authors listed in comments on top of 
+For Keccak and the random number generator
+we are using public-domain code from sources
+and by authors listed in comments on top of
 the respective files.
+
+The cmake files for ASAN and UBSAN are published using
+Apache 2.0 License.
diff --git a/cmake/ASanitizerTarget.cmake b/cmake/ASanitizerTarget.cmake
new file mode 100644
index 0000000..30be837
--- /dev/null
+++ b/cmake/ASanitizerTarget.cmake
@@ -0,0 +1,130 @@
+#
+# #%L
+# %%
+# Copyright (C) 2018 BMW Car IT GmbH
+# %%
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# #L%
+#
+
+# AddressSanitizerTarget
+# ======================
+#
+# Sets up an ``asan`` target that automates executing tests with
+# `AddressSanitizer <https://github.com/google/sanitizers/wiki/AddressSanitizer>`_
+# (ASan) - a memory error detector for C/C++.
+#
+# Usage
+# -----
+#
+# Add the following lines to your project's ``CMakeLists.txt``:
+#
+# .. code-block:: cmake
+#
+#  if(CMAKE_BUILD_TYPE STREQUAL ASAN)
+#      include(AddressSanitizerTarget)
+#  endif()
+#
+# Then execute CMake with:
+#
+# .. code-block:: sh
+#
+#  CXX=clang++ cmake -DCMAKE_BUILD_TYPE=ASAN $SOURCE_DIR
+#
+# and generate the ASan report for CTest based tests with:
+#
+# .. code-block:: sh
+#
+#  cmake --build . --target asan
+#
+# If necessary CTest parameters can be passed in the ARGS env variable:
+#
+# .. code-block:: sh
+#
+#  ARGS="-VV --repeat-until-fail 10" cmake --build . --target asan
+#
+# Configuration
+# -------------
+#
+# This module reads the following configuration variables:
+#
+# ``ASAN_OPTIONS``
+#  `Run-time flags <https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags>`__
+#  for the AddressSanitizer.
+#
+# ``LSAN_OPTIONS``
+#  `Run-time flags <https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer#flags>`__
+#  for the LeakSanitizer (LSan).
+#
+
+if(NOT CMAKE_BUILD_TYPE STREQUAL ASAN)
+    message(FATAL_ERROR "AddressSanitizerTarget.cmake requires CMake to be "
+                        "called with -DCMAKE_BUILD_TYPE=ASAN")
+endif()
+
+# ASAN build type
+set(_ASAN_FLAGS "-fsanitize=address -fno-omit-frame-pointer")
+set(_ASAN_FLAGS "${_ASAN_FLAGS} -fsanitize-address-use-after-scope")
+set(_ASAN_FLAGS "${_ASAN_FLAGS} -g -O1")
+set(CMAKE_CXX_FLAGS_ASAN ${_ASAN_FLAGS} CACHE STRING
+    "Flags used by the C++ compiler during ASAN builds." FORCE
+)
+set(CMAKE_C_FLAGS_ASAN ${_ASAN_FLAGS} CACHE STRING
+    "Flags used by the C compiler during ASAN builds." FORCE
+)
+set(CMAKE_EXE_LINKER_FLAGS_ASAN ${_ASAN_FLAGS} CACHE STRING
+    "Flags used for linking binaries during ASAN builds." FORCE
+)
+set(CMAKE_SHARED_LINKER_FLAGS_ASAN ${_ASAN_FLAGS} CACHE STRING
+    "Flags used for linking shared libraries during ASAN builds." FORCE
+)
+mark_as_advanced(
+    CMAKE_CXX_FLAGS_ASAN CMAKE_C_FLAGS_ASAN CMAKE_EXE_LINKER_FLAGS_ASAN
+    CMAKE_SHARED_LINKER_FLAGS_ASAN CMAKE_STATIC_LINKER_FLAGS_ASAN
+)
+unset(_ASAN_FLAGS)
+
+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)
+    find_library(ASAN_LIBRARY NAMES asan libasan.so.6 libasan.so.5)
+
+    set(ASAN_FIND_REQUIRED TRUE)
+    include(FindPackageHandleStandardArgs)
+    find_package_handle_standard_args(ASAN
+        REQUIRED_VARS ASAN_LIBRARY
+    )
+    mark_as_advanced(ASAN_LIBRARY)
+elseif(CMAKE_CXX_COMPILER_ID STREQUAL Clang)
+    # TODO: Setup proper check for the asan lib (part of compiler-rt-staticdev)
+    set(ASAN_FOUND TRUE)
+endif()
+
+# Add asan target.
+string(CONCAT _asan_options
+    "detect_odr_violation=0,max_free_fill_size=65535,"
+    "detect_stack_use_after_return=true,"
+    "${ASAN_OPTIONS}"
+)
+add_custom_target(asan
+    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR}
+
+    # working escaping for make: \${ARGS} \$\${ARGS}
+    # working escaping for ninja: \$\${ARGS}
+    # No luck with VERBATIM option.
+    COMMAND ${CMAKE_COMMAND} -E env
+                ASAN_OPTIONS=${_asan_options} LSAN_OPTIONS=${LSAN_OPTIONS}
+            ${CMAKE_CTEST_COMMAND} --output-on-failure "\$\${ARGS}"
+
+    COMMENT "Generate ASan report"
+    USES_TERMINAL # Ensure ninja outputs to stdout.
+)
+unset(_asan_options)
\ No newline at end of file
diff --git a/cmake/UBSanitizerTarget.cmake b/cmake/UBSanitizerTarget.cmake
new file mode 100644
index 0000000..07f3cf3
--- /dev/null
+++ b/cmake/UBSanitizerTarget.cmake
@@ -0,0 +1,125 @@
+#
+# #%L
+# %%
+# Copyright (C) 2018 BMW Car IT GmbH
+# %%
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# #L%
+#
+
+# UBSanitizerTarget
+# ======================
+#
+# Sets up an ``ubsan`` target that automates executing tests with
+# `UndefinedBehaviorSanitizer <https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html>`_
+# (UBSan) - a fast undefined behavior detector for C/C++.
+#
+# Usage
+# -----
+#
+# Add the following lines to your project's ``CMakeLists.txt``:
+#
+# .. code-block:: cmake
+#
+#  if(CMAKE_BUILD_TYPE STREQUAL UBSAN)
+#      include(UBSanitizerTarget)
+#  endif()
+#
+# Then execute CMake with:
+#
+# .. code-block:: sh
+#
+#  CXX=clang++ cmake -DCMAKE_BUILD_TYPE=UBSAN $SOURCE_DIR
+#
+# and generate the UBSan report for CTest based tests with:
+#
+# .. code-block:: sh
+#
+#  cmake --build . --target ubsan
+#
+# If necessary CTest parameters can be passed in the ARGS env variable:
+#
+# .. code-block:: sh
+#
+#  ARGS="-VV --repeat-until-fail 10" cmake --build . --target ubsan
+#
+# Configuration
+# -------------
+#
+# This module reads the following configuration variables:
+#
+# ``UBSAN_OPTIONS``
+#  `Run-time flags <https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html>`__
+#  for the UndefinedBehaviorSanitizer.
+#
+
+if(NOT CMAKE_BUILD_TYPE STREQUAL UBSAN)
+    message(FATAL_ERROR "UBSanitizerTarget.cmake requires CMake to be "
+                        "called with -DCMAKE_BUILD_TYPE=UBSAN")
+endif()
+
+# UBSAN build type
+set(_UBSAN_FLAGS "-fsanitize=undefined -fno-omit-frame-pointer")
+set(_UBSAN_FLAGS "${_UBSAN_FLAGS} -fno-sanitize-recover=all")
+set(_UBSAN_FLAGS "${_UBSAN_FLAGS} -g -O1")
+set(CMAKE_CXX_FLAGS_UBSAN ${_UBSAN_FLAGS} CACHE STRING
+    "Flags used by the C++ compiler during UBSAN builds." FORCE
+)
+set(CMAKE_C_FLAGS_UBSAN ${_UBSAN_FLAGS} CACHE STRING
+    "Flags used by the C compiler during UBSAN builds." FORCE
+)
+set(CMAKE_EXE_LINKER_FLAGS_UBSAN ${_UBSAN_FLAGS} CACHE STRING
+    "Flags used for linking binaries during UBSAN builds." FORCE
+)
+set(CMAKE_SHARED_LINKER_FLAGS_UBSAN ${_UBSAN_FLAGS} CACHE STRING
+    "Flags used for linking shared libraries during UBSAN builds." FORCE
+)
+mark_as_advanced(
+    CMAKE_CXX_FLAGS_UBSAN CMAKE_C_FLAGS_UBSAN CMAKE_EXE_LINKER_FLAGS_UBSAN
+    CMAKE_SHARED_LINKER_FLAGS_UBSAN CMAKE_STATIC_LINKER_FLAGS_UBSAN
+)
+unset(_UBSAN_FLAGS)
+
+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)
+    find_library(UBSAN_LIBRARY ubsan)
+
+    set(UBSAN_FIND_REQUIRED TRUE)
+    include(FindPackageHandleStandardArgs)
+    find_package_handle_standard_args(UBSAN
+        REQUIRED_VARS UBSAN_LIBRARY
+    )
+    mark_as_advanced(UBSAN_LIBRARY)
+elseif(CMAKE_CXX_COMPILER_ID STREQUAL Clang)
+    # TODO: Setup proper check for the ubsan lib (part of compiler-rt-staticdev)
+    set(UBSAN_FOUND TRUE)
+endif()
+
+# Add ubsan target.
+string(CONCAT _ubsan_options
+    "print_stacktrace=1,"
+    "${UBSAN_OPTIONS}"
+)
+add_custom_target(ubsan
+    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR}
+
+    # working escaping for make: \${ARGS} \$\${ARGS}
+    # working escaping for ninja: \$\${ARGS}
+    # No luck with VERBATIM option.
+    COMMAND ${CMAKE_COMMAND} -E env
+                UBSAN_OPTIONS=${_ubsan_options}
+            ${CMAKE_CTEST_COMMAND} --output-on-failure "\$\${ARGS}"
+
+    COMMENT "Generate UBSan report"
+    USES_TERMINAL # Ensure ninja outputs to stdout.
+)
+unset(_ubsan_options)
-- 
2.38.1

